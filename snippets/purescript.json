{
  "Derive newtype instance": {
    "prefix": "nderive",
    "description": "Use newtype deriving on any typeclass",
    "body": "derive newtype instance $1$2 ::$0 $3 $2"
  },
  "Generate json instances": {
    "prefix": "json",
    "description": "Generate the deriving of the EncodeJson and DecodeJson typeclasses",
    "body": [
      "derive newtype instance encodeJson$1 :: EncodeJson $1",
      "derive newtype instance decodeJson$1 :: DecodeJson $1"
    ]
  },
  "Generic": {
    "prefix": "generic",
    "description": "Generate the generic instance for a type",
    "body": "derive instance generic$1 :: Generic $1 _"
  },
  "Generic Debug": {
    "prefix": "gdebug",
    "description": "Generate generic debug instances",
    "body": ["instance debug$1 :: Debug $1 where", "  debug = genericDebug"]
  },
  "Generic json": {
    "prefix": "gjson",
    "description": "Generate generic json instances",
    "body": [
      "instance encodeJson$1 :: EncodeJson $1 where",
      "  encodeJson = genericEncodeJson",
      "instance decodeJson$1 :: DecodeJson $1 where",
      "  decodeJson = genericDecodeJson"
    ]
  },
  "Instance": {
    "prefix": "instance",
    "description": "Declare typeclass instance",
    "body": ["instance $1$2 :: $3 $2 $4 where", "    $0"]
  },
  "PInstance": {
    "prefix": "pinstance",
    "description": "Declare typeclass instance with parenthesis",
    "body": ["instance $1$2 :: $3 ($2 $4) $5 where", "    $0"]
  },
  "SProxy": {
    "prefix": "sproxy",
    "description": "Generate a sproxy constant",
    "body": ["_$1 :: SProxy \"$1\"", "_$1 = SProxy"]
  },
  "Variant constructor": {
    "prefix": "inj",
    "description": "Generate a constructor for a variant an inline sproxy",
    "body": [
      "$1 :: forall r a. a -> Variant ( $1 :: a | r)",
      "$1 = inj (SProxy :: SProxy \"$1\")"
    ]
  },
  "Full variant constructor": {
    "prefix": "injf",
    "description": "Generate a constructor for a variant with an external sproxy definition",
    "body": [
      "$1 :: forall r a. a -> Variant ( $1 :: a | r)",
      "$1 = inj _$1",
      "",
      "_$1 :: SProxy \"$1\"",
      "_$1 = SProxy"
    ]
  }
}
