[["%",{"text":"Handle.js","registerMode":0}],["*",{"text":"};","registerMode":2}],["-",{"text":" ","registerMode":1}],["1",{"text":"};","registerMode":2}],["2",{"text":"    if (Reflect.has(matchers, key)) {\n    return applyMany(length, matchers[key](continuation), parameters)\n  }\n    \n    return ","registerMode":2}],["3",{"text":"    (target :: #Type)","registerMode":2}],["4",{"text":"","registerMode":2}],["5",{"text":"inSubrow :: Int\ninSubrow = undefined","registerMode":2}],["6",{"text":"    forall row subrow remaining.\n    SProxy key ->\n    RProxy row ->\n    Int","registerMode":2}],["7",{"text":"","registerMode":2}],["8",{"text":"","registerMode":2}],["9",{"text":"{-\nget :: s \nput :: s -> ()\n\n...becomes\nget :: (s -> Lune remaining a) -> Lune remaining result\nput :: (unit -> Lune remaining a) -> state -> Lune remaining result\n-}","registerMode":2}],["0",{"text":"          (forall t. (forall focus tail. Row.Cons key focus tail remaining => t) -> t)","registerMode":2}],["/",{"text":"Debug","registerMode":0}]]