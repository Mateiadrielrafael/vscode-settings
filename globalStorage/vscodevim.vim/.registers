[["%",{"text":"packages.dhall","registerMode":0}],["*",{"text":"{-\nWelcome to your new Dhall package-set!\n\nBelow are instructions for how to edit this file for most use\ncases, so that you don't need to know Dhall to use it.\n\n## Warning: Don't Move This Top-Level Comment!\n\nDue to how `dhall format` currently works, this comment's\ninstructions cannot appear near corresponding sections below\nbecause `dhall format` will delete the comment. However,\nit will not delete a top-level comment like this one.\n\n## Use Cases\n\nMost will want to do one or both of these options:\n1. Override/Patch a package's dependency\n2. Add a package not already in the default package set\n\nThis file will continue to work whether you use one or both options.\nInstructions for each option are explained below.\n\n### Overriding/Patching a package\n\nPurpose:\n- Change a package's dependency to a newer/older release than the\n    default package set's release\n- Use your own modified version of some dependency that may\n    include new API, changed API, removed API by\n    using your custom git repo of the library rather than\n    the package set's repo\n\nSyntax:\nwhere `entityName` is one of the following:\n- dependencies\n- repo\n- version\n-------------------------------\nlet upstream = --\nin  upstream\n  with packageName.entityName = \"new value\"\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with halogen.version = \"master\"\n  with halogen.repo = \"https://example.com/path/to/git/repo.git\"\n\n  with halogen-vdom.version = \"v4.0.0\"\n-------------------------------\n\n### Additions\n\nPurpose:\n- Add packages that aren't already included in the default package set\n\nSyntax:\nwhere `<version>` is:\n- a tag (i.e. \"v4.0.0\")\n- a branch (i.e. \"master\")\n- commit hash (i.e. \"701f3e44aafb1a6459281714858fadf2c4c2a977\")\n-------------------------------\nlet upstream = --\nin  upstream\n  with new-package-name =\n    { dependencies =\n       [ \"dependency1\"\n       , \"dependency2\"\n       ]\n    , repo =\n       \"https://example.com/path/to/git/repo.git\"\n    , version =\n        \"<version>\"\n    }\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with benchotron =\n      { dependencies =\n          [ \"arrays\"\n          , \"exists\"\n          , \"profunctor\"\n          , \"strings\"\n          , \"quickcheck\"\n          , \"lcg\"\n          , \"transformers\"\n          , \"foldable-traversable\"\n          , \"exceptions\"\n          , \"node-fs\"\n          , \"node-buffer\"\n          , \"node-readline\"\n          , \"datetime\"\n          , \"now\"\n          ]\n      , repo =\n          \"https://github.com/hdgarrood/purescript-benchotron.git\"\n      , version =\n          \"v7.0.0\"\n      }\n-------------------------------\n-}","registerMode":2}],["-",{"text":" ","registerMode":1}],["1",{"text":"{-\nWelcome to your new Dhall package-set!\n\nBelow are instructions for how to edit this file for most use\ncases, so that you don't need to know Dhall to use it.\n\n## Warning: Don't Move This Top-Level Comment!\n\nDue to how `dhall format` currently works, this comment's\ninstructions cannot appear near corresponding sections below\nbecause `dhall format` will delete the comment. However,\nit will not delete a top-level comment like this one.\n\n## Use Cases\n\nMost will want to do one or both of these options:\n1. Override/Patch a package's dependency\n2. Add a package not already in the default package set\n\nThis file will continue to work whether you use one or both options.\nInstructions for each option are explained below.\n\n### Overriding/Patching a package\n\nPurpose:\n- Change a package's dependency to a newer/older release than the\n    default package set's release\n- Use your own modified version of some dependency that may\n    include new API, changed API, removed API by\n    using your custom git repo of the library rather than\n    the package set's repo\n\nSyntax:\nwhere `entityName` is one of the following:\n- dependencies\n- repo\n- version\n-------------------------------\nlet upstream = --\nin  upstream\n  with packageName.entityName = \"new value\"\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with halogen.version = \"master\"\n  with halogen.repo = \"https://example.com/path/to/git/repo.git\"\n\n  with halogen-vdom.version = \"v4.0.0\"\n-------------------------------\n\n### Additions\n\nPurpose:\n- Add packages that aren't already included in the default package set\n\nSyntax:\nwhere `<version>` is:\n- a tag (i.e. \"v4.0.0\")\n- a branch (i.e. \"master\")\n- commit hash (i.e. \"701f3e44aafb1a6459281714858fadf2c4c2a977\")\n-------------------------------\nlet upstream = --\nin  upstream\n  with new-package-name =\n    { dependencies =\n       [ \"dependency1\"\n       , \"dependency2\"\n       ]\n    , repo =\n       \"https://example.com/path/to/git/repo.git\"\n    , version =\n        \"<version>\"\n    }\n-------------------------------\n\nExample:\n-------------------------------\nlet upstream = --\nin  upstream\n  with benchotron =\n      { dependencies =\n          [ \"arrays\"\n          , \"exists\"\n          , \"profunctor\"\n          , \"strings\"\n          , \"quickcheck\"\n          , \"lcg\"\n          , \"transformers\"\n          , \"foldable-traversable\"\n          , \"exceptions\"\n          , \"node-fs\"\n          , \"node-buffer\"\n          , \"node-readline\"\n          , \"datetime\"\n          , \"now\"\n          ]\n      , repo =\n          \"https://github.com/hdgarrood/purescript-benchotron.git\"\n      , version =\n          \"v7.0.0\"\n      }\n-------------------------------\n-}","registerMode":2}],["2",{"text":"","registerMode":2}],["3",{"text":"foldType :: forall f. Monoid f => (Type -> f) -> Type -> f","registerMode":2}],["4",{"text":"    -- TODO: instantiation branches","registerMode":2}],["5",{"text":"\ninstantiateRight :: forall r. Context -> Existential -> Type -> Run ( supply :: SUPPLY Int | r ) Context\ninstantiateRight ctx existential = applyContext ctx >>> case _ of\n    ty -> pure $ solve existential ty ctx\n","registerMode":2}],["6",{"text":"","registerMode":2}],["7",{"text":"        pure ctx","registerMode":2}],["8",{"text":"            solve existential (on Function Existential from' to') ","registerMode":2}],["9",{"text":"","registerMode":2}],["0",{"text":"instantiateLeft :: forall r. Context -> Existential -> Type -> Run ( supply :: SUPPLY Int | r ) Context\ninstantiateLeft ctx existential = case _ of","registerMode":2}],["/",{"text":":w","registerMode":0}]]