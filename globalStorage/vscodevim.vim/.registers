[["%",{"text":"","registerMode":0}],["*",{"text":"","registerMode":2}],["-",{"text":" ","registerMode":1}],["1",{"text":"","registerMode":2}],["2",{"text":"foldType :: forall f. Monoid f => (Type -> f) -> Type -> f","registerMode":2}],["3",{"text":"    -- TODO: instantiation branches","registerMode":2}],["4",{"text":"\ninstantiateRight :: forall r. Context -> Existential -> Type -> Run ( supply :: SUPPLY Int | r ) Context\ninstantiateRight ctx existential = applyContext ctx >>> case _ of\n    ty -> pure $ solve existential ty ctx\n","registerMode":2}],["5",{"text":"","registerMode":2}],["6",{"text":"        pure ctx","registerMode":2}],["7",{"text":"            solve existential (on Function Existential from' to') ","registerMode":2}],["8",{"text":"","registerMode":2}],["9",{"text":"","registerMode":2}],["0",{"text":"instantiateLeft :: forall r. Context -> Existential -> Type -> Run ( supply :: SUPPLY Int | r ) Context\ninstantiateLeft ctx existential = case _ of","registerMode":2}],["/",{"text":":w","registerMode":0}]]