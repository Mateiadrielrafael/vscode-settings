[["%",{"text":"WithHeight.purs","registerMode":0}],["*",{"text":"            traceM { position, y }","registerMode":2}],["-",{"text":"HashMap.fromArray $ mapWithIndex (\\i _ -> Tuple (Bound i) start) $ Array.range 0 (argCount - 1)","registerMode":1}],["1",{"text":"            traceM { position, y }","registerMode":2}],["2",{"text":"  starts <- for vars \\var -> Tuple var start","registerMode":2}],["3",{"text":"-}","registerMode":2}],["4",{"text":"-- {-","registerMode":2}],["5",{"text":"import Web.HTML.HTMLMediaElement.CanPlayType (CanPlayType(..))","registerMode":2}],["6",{"text":"    , free: mempty","registerMode":2}],["7",{"text":"","registerMode":2}],["8",{"text":"lookupBinders :: Name -> RenderM (Maybe Binder)\nlookupBinders = case _ of\n  Bound at -> ask <#> (_.arguments >>> flip Array.index at)\n  Free name' -> ask <#> (_.free >>> HashMap.lookup name')","registerMode":2}],["9",{"text":"","registerMode":2}],["0",{"text":"-- | Create a name-map from bound values\nfromBound :: forall v. Array v -> NameMap v\nfromBound = { free: HashMap.empty, bound: _ }","registerMode":2}],["/",{"text":"withFre","registerMode":0}]]