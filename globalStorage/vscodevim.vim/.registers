[["%",{"text":"Main.purs","registerMode":0}],["*",{"text":"\nnPlusZeroIsN = \\n => Refl Nat n\n\nnPlusZeroIsNPlusZero :: (n : Nat) -> Equal Nat Nat (plus n zero) (plus zero n)\nnPlusZeroIsNPlusZero = \\n => Refl Nat n\n\nnaturalInduction :: \n    (P : Nat -> *) -> -- Propriety we are proving\n    (P zero) -> -- Base case","registerMode":1}],["-",{"text":" ","registerMode":1}],["1",{"text":"","registerMode":2}],["2",{"text":"import { readFileSync } from \"fs\";","registerMode":2}],["3",{"text":"const content = readFileSync(\"examples/test.lpi\").toString();","registerMode":2}],["4",{"text":"","registerMode":2}],["5",{"text":"types :: Environment\ntypes = mempty\n\nvalues :: Environment\nvalues = mempty\n\nevalAndInfer :: forall r. Term -> CheckM r Term\nevalAndInfer x = do\n  ty <- infer x\n  value <- eval x\n  pure $ Annotation (valueToTerm value) (valueToTerm ty)","registerMode":2}],["6",{"text":"  ","registerMode":2}],["7",{"text":"  logShow last","registerMode":2}],["8",{"text":"-- Parsing and lexing stage","registerMode":2}],["9",{"text":"textStage :: forall e r. Stage (LexingError + ParsingStageError + e) r String (Array TopLevelEntry)\ntextStage = lexerStage >=> parsingStage\n","registerMode":2}],["0",{"text":"first :: (a : *) -> (b : *) -> Tuple a b -> a\nfirst = \\A B T => T A \\a b => a","registerMode":2}],["/",{"text":"w","registerMode":0}]]