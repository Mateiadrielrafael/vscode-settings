[["%",{"text":"Run.purs","registerMode":0}],["*",{"text":"  -- The unsafeCoerce is there because the compiler can't find the Row.Union instance (so I can't use `expand`)\n  -- It basically coerces from ( parAff :: PAR_AFF | r2 ) to ( parAff :: PAR_AFF, aff :: AFF | r2 )","registerMode":2}],["-",{"text":" ","registerMode":1}],["1",{"text":"  -- The unsafeCoerce is there because the compiler can't find the Row.Union instance (so I can't use `expand`)\n  -- It basically coerces from ( parAff :: PAR_AFF | r2 ) to ( parAff :: PAR_AFF, aff :: AFF | r2 )","registerMode":2}],["2",{"text":"  -- Same as the Aff implementation","registerMode":2}],["3",{"text":"    >>> unsafeCoerce\n    >>> interpretRec (on (SP))","registerMode":2}],["4",{"text":"\n    _parAff :: SProxy \"parAff\"\n    _parAff = SProxy","registerMode":2}],["5",{"text":"","registerMode":2}],["6",{"text":"\n    _aff :: SProxy \"aff\"\n    _aff = SProxy","registerMode":2}],["7",{"text":"","registerMode":2}],["8",{"text":"    -- The compiler can't find the Union isntance for using `extend`,\n    -- but this is basically going from ( parAff :: PAR_AFF | r2 ) to ( parAff :: PAR_AFF, aff :: AFF | r2 )","registerMode":2}],["9",{"text":"    expanded :: Run ( parAff :: PAR_AFF, aff :: AFF | r2) _\n    expanded = unsafeCoerce $ toRows par","registerMode":2}],["0",{"text":"  -- The unsafeCoerce is there because the compiler can't find the Row.Union instance (so I can't use `expand`)\n  -- It basically coerces from ( parAff :: PAR_AFF | r2 ) to ( parAff :: PAR_AFF, aff :: AFF | r2 )","registerMode":2}],["/",{"text":"debugSpy","registerMode":0}]]