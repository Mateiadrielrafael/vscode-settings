<<<<<<< Updated upstream
[["%",{"text":"Do.purs","registerMode":0}],["*",{"text":"    dotnet-sdk","registerMode":2}],["-",{"text":" ","registerMode":1}],["1",{"text":"    dotnet-sdk","registerMode":2}],["2",{"text":"type Term = Term","registerMode":2}],["3",{"text":"","registerMode":2}],["4",{"text":"--------- Type inference","registerMode":2}],["5",{"text":"    -- TODO: abstract this away","registerMode":2}],["6",{"text":"    zonk (Tuple ctx' ty) = Tuple ctx' $ applyContext ctx' ty","registerMode":2}],["7",{"text":"    wrapper f e = zonk <$> on f applyContext ty1 ty2 ","registerMode":2}],["8",{"text":"    _ -> unsafeCrashWith \"unimplemented\"","registerMode":2}],["9",{"text":"    ","registerMode":2}],["0",{"text":"    = ExprLambda String Expr\n    | ExprCall Expr Expr\n    | ExprVariable String\n    | ExprAnnotation Expr Type\n    | ExprUnit","registerMode":2}],["/",{"text":"\\bCDeclaration\\b","registerMode":0}]]
=======
[["%",{"text":"Program.fs","registerMode":0}],["*",{"text":"#","registerMode":1}],["-",{"text":"#","registerMode":1}],["1",{"text":"#include <string>","registerMode":2}],["2",{"text":"// Example program","registerMode":2}],["3",{"text":"","registerMode":2}],["4",{"text":"                  config ->","registerMode":2}],["5",{"text":"                         machineId = machineId }","registerMode":2}],["6",{"text":"                | Some { data = Belt belt","registerMode":2}],["7",{"text":"                    Raylib.DrawRectangleLines(\r\n                        x * Config.tileSize,\r\n                        y * Config.tileSize,\r\n                        Config.tileSize,\r\n                        Config.tileSize,\r\n                        Color.RED\r\n                    )\r\n\r\n                    let itemCount = belt.items.ToArray().Length\r\n\r\n                    for i = 0 to itemCount - 1 do\r\n                        let item = belt.items.[itemCount - i - 1]\r\n\r\n                        let x, y = Belt.itemPosition (x, y, belt, item)\r\n\r\n                        Raylib.DrawRectangle(\r\n                            x + Config.padding,\r\n                            y + Config.padding,\r\n                            Config.itemWidth,\r\n                            Config.itemWidth,\r\n                            Color.GREEN\r\n                        )\r\n\r\n                        Raylib.DrawRectangleLines(\r\n                            x + Config.padding,\r\n                            y + Config.padding,\r\n                            Config.itemWidth,\r\n                            Config.itemWidth,\r\n                            Color.BLUE\r\n                        )\r\n\r\n                    ()","registerMode":2}],["8",{"text":"","registerMode":2}],["9",{"text":"","registerMode":2}],["0",{"text":"#include <iostream>\r\n\r\n#define SIZE 100\r\n\r\nusing namespace std;\r\n\r\nstruct Rect {\r\n    int width;\r\n    int height;\r\n};\r\n\r\nbool isSquare(Rect rect) {\r\n    return rect.width == rect.height;    \r\n}\r\n\r\nint area(Rect rect) {\r\n    return rect.width * rect.height;    \r\n}\r\n\r\nint perimeter(Rect rect) {\r\n    return 2 * (rect.width + rect.height);    \r\n}\r\n\r\nvoid bubbleSortImpl(Rect x[SIZE], int upperBound, int i) {\r\n  if (upperBound < 2)\r\n    return;\r\n\r\n  if (i > upperBound - 2)\r\n    return bubbleSortImpl(x, upperBound - 1, 0);\r\n\r\n  if (area(x[i]) < area(x[i + 1])) {\r\n    Rect t = x[i];\r\n    x[i] = x[i + 1];\r\n    x[i + 1] = t;\r\n  }\r\n\r\n  bubbleSortImpl(x, upperBound, i + 1);\r\n}\r\n\r\nvoid bubbleSort(Rect x[SIZE], int n) {\r\n  bubbleSortImpl(x, n, 0);\r\n}\r\n\r\nint main()\r\n{\r\n    int n;\r\n    Rect rects[SIZE];\r\n    \r\n    cin >> n;\r\n    \r\n    for (int i = 0; i < n; i++) {\r\n        cout << i << \": \";\r\n        cin >> rects[i].width >> rects[i].height;\r\n    }\r\n    \r\n    for (int i = 0; i < n; i++) {\r\n        cout << i << \":\\n\";\r\n        cout << \"    - arie = \" << area(rects[i]) << endl;\r\n        cout << \"    - perimetru = \" << perimeter(rects[i]) << endl;\r\n    }\r\n    \r\n    int maxArea = 0, maxOccurances = 0;\r\n    \r\n    for (int i = 0; i < n; i++) {\r\n        Rect square = rects[i];\r\n        if (!isSquare(square)) continue;    \r\n    \r\n        int sqArea = area(square);\r\n        \r\n        if (sqArea == maxArea)\r\n            maxOccurances++;\r\n        else if (sqArea > maxArea) {\r\n            maxArea = sqArea;\r\n            maxOccurances = 1;\r\n        }\r\n    }\r\n    \r\n    if (maxArea == 0)\r\n        cout << \"Nu am gasit patrate\" << endl;\r\n    else\r\n        cout << \"Numarul de patrate cu arie maxima: \" << maxOccurances << endl;\r\n\r\n    int maxPerimeter = 0;\r\n    Rect maxSquare;\r\n    \r\n    for (int i = 0; i < n; i++) {\r\n        Rect square = rects[i];\r\n        if (!isSquare(square)) continue;    \r\n    \r\n        int sqPerimeter = perimeter(square);\r\n\r\n        if (sqPerimeter > maxPerimeter) {\r\n            maxPerimeter = sqPerimeter;\r\n            maxSquare = square;\r\n        }\r\n    }\r\n    \r\n    if (maxPerimeter == 0)\r\n        cout << \"Nu am gasit patrate\" << endl;\r\n    else\r\n        cout << \"Patratul cu perimetru maxim: \" << maxSquare.width << \" x \" << maxSquare.height << endl;\r\n        \r\n    bubbleSort(rects, n);\r\n        \r\n    for (int i = 0; i < n; i++) {\r\n        Rect square = rects[i];\r\n        cout << square.width << \" x \" << square.height << endl;   \r\n    }\r\n}","registerMode":2}],["/",{"text":"\\bCDeclaration\\b","registerMode":0}]]
>>>>>>> Stashed changes
