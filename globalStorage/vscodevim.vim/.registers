[["%",{"text":"","registerMode":0}],["*",{"text":"        , Consumer 4","registerMode":2}],["-",{"text":")","registerMode":1}],["1",{"text":"","registerMode":2}],["2",{"text":"              ports","registerMode":2}],["3",{"text":"\n            sorted :: Array (PortId /\\ Number)\n            sorted = Array.sortWith snd ports","registerMode":2}],["4",{"text":"\n        outputsImpl :: Int -> List PortData -> RealFunction -> List RealFunction \n        outputsImpl 0 Nil _ = Nil\n        -- outputsImpl 1 (head:Nil) remaining = pure \\time -> min (head.maxOutput time) (remaining time)\n        outputsImpl n (head:tail) remaining = current:(outputsImpl (n - 1) tail $ remaining - current)\n            where\n            current time \n                | head.maxOutput time >= (remaining time) / (toNumber n) = (remaining time) / (toNumber n)\n                | otherwise = head.maxOutput time\n        outputsImpl _ _ _ = Nil","registerMode":2}],["5",{"text":"            -- # outputsImpl (length ports) (List.fromFoldable sorted) amount ","registerMode":2}],["6",{"text":"            # Array.findMap (\\(id' /\\ f) -> if id == id' then Just f else Nothing)","registerMode":2}],["7",{"text":"            # Array.","registerMode":2}],["8",{"text":"            # Array.zipWith (_.id >>> Tuple) sorted","registerMode":2}],["9",{"text":"import Moontorio.RealFunction (RealFunction)","registerMode":2}],["0",{"text":"        , Consumer 4","registerMode":2}],["/",{"text":"\\bCDeclaration\\b","registerMode":0}],["#",{"text":"misc.nix","registerMode":1}]]